        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:// set NOISY_TEST to 0 to remove printfs from output
        -:   10:#define NOISY_TEST 1
        -:   11: 
function main called 1 returned 100% blocks executed 90%
        1:   12:int main() { 
        -:   13:    int i;
        1:   14:    int seed = 1000;
        1:   15:    int numPlayer = 2; 
        1:   16:    int maxBonus = 10; 
        -:   17:    int p, r, handCount;  
        -:   18:    int bonus;
        1:   19:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   20:               , remodel, smithy, village, baron, great_hall};
        -:   21:    struct gameState G;
        1:   22:    int maxHandCount = 5;
        -:   23:    // arrays of all coppers, silvers, and golds
        -:   24:    int coppers[MAX_HAND];
        -:   25:    int silvers[MAX_HAND];
        -:   26:    int golds[MAX_HAND];
      501:   27:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   28:    {
      500:   29:        coppers[i] = copper;
      500:   30:        silvers[i] = silver;
      500:   31:        golds[i] = gold;
        -:   32:    }
        -:   33:
        1:   34:    printf ("TESTING updateCoins():\n");
call    0 returned 100%
        3:   35:    for (p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   36:    {
       12:   37:        for (handCount = 1; handCount <= maxHandCount; handCount++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   38:        {
      120:   39:            for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   40:            {
        -:   41:#if (NOISY_TEST == 1)
      110:   42:                printf("Test player %d with %d treasure card(s) and %d bonus.\n", p, handCount, bonus);
call    0 returned 100%
        -:   43:#endif
      110:   44:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
      110:   45:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
      110:   46:                G.handCount[p] = handCount;                 // set the number of cards on hand
      110:   47:                memcpy(G.hand[p], coppers, sizeof(int) * handCount); // set all the cards to copper
      110:   48:                updateCoins(p, &G, bonus);
call    0 returned 100%
        -:   49:#if (NOISY_TEST == 1)
      110:   50:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
call    0 returned 100%
        -:   51:#endif
      110:   52:                assert(G.coins == handCount * 1 + bonus); // check if the number of coins is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   53:
      110:   54:                memcpy(G.hand[p], silvers, sizeof(int) * handCount); // set all the cards to silver
      110:   55:                updateCoins(p, &G, bonus);
call    0 returned 100%
        -:   56:#if (NOISY_TEST == 1)
      110:   57:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
call    0 returned 100%
        -:   58:#endif
      110:   59:                assert(G.coins == handCount * 2 + bonus); // check if the number of coins is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   60:
      110:   61:                memcpy(G.hand[p], golds, sizeof(int) * handCount); // set all the cards to gold
      110:   62:                updateCoins(p, &G, bonus);
call    0 returned 100%
        -:   63:#if (NOISY_TEST == 1)
      110:   64:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
call    0 returned 100%
        -:   65:#endif
      110:   66:                assert(G.coins == handCount * 3 + bonus); // check if the number of coins is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   67:            }
        -:   68:        }
        -:   69:    }
        -:   70:
        1:   71:    printf("All tests passed!\n");
call    0 returned 100%
        -:   72:
        1:   73:    return 0;
        -:   74:}
